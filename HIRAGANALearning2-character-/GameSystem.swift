
//
//  GameSystem.swift
//  HIRAGANALearning2-character-
//
//  Created by 内山由基 on 2018/09/06.
//  Copyright © 2018年 yuuki uchiyama. All rights reserved.
//

import Foundation

extension String{
    var isTone: Bool {
        let range = "^[ぁぃぅぇぉゃゅょ]+$"
        return NSPredicate(format: "SELF MATCHES %@", range).evaluate(with: self)
    }
    
    var isDakuten: Bool{
        let range = "^[がぎぐげござじずぜぞだぢづでどばびぶべぼぱぴぷぺぽ]+$"
        return NSPredicate(format: "SELF MATCHES %@", range).evaluate(with: self)
    }
}

class CardData{
    var word: String!
    var image: NSData!
    
    var characterInWord:[String] = []
    
    init(_ w:String,_ i:NSData) {
        word = w
        image = i
        
        for i in 0 ..< w.count{
            let string = String(w[w.index(w.startIndex, offsetBy: i) ..< w.index(w.startIndex, offsetBy: i+1)])
            var s = ""
            
            if !string.isTone{
                if i == w.count - 1{
                    s = string
                }else{
                    let nextString = String(w[w.index(w.startIndex, offsetBy: i+1) ..< w.index(w.startIndex, offsetBy: i+2)])
                    if nextString.isTone{
                        s = string + nextString
                    }else{
                        s = string
                    }
                }
                characterInWord.append(s)
            }
        }
    }
}


class GameSystem{
    var similarCharacters:[String:[String]] =
        ["あ":["お", "ぬ", "の", "め"],
         "い":["け","げ","こ","ぎ","し","じ","に", "り"],
         "う":["ゔ","ち","ぢ","つ","づ","ふ","ぶ","ぷ", "ら", "る", "ろ"],
         "ゔ":["う","ち","ぢ","つ","づ","ふ","ぶ","ぷ", "ら", "る", "ろ"],

         "え":["ひ","び","ぴ", "る", "れ", "ろ", "わ", "ん"],
         "お":["あ", "す","ず", "ち","ぢ", "ぬ", "ね", "の", "ま", "み", "む", "め", "わ"],
         
         "か":["が","な", "ふ","ぶ","ぷ", "や", "ゆ", "ら", "り", "わ"],
         "き":["ぎ","さ","ざ", "ま", "も"],
         "く":["ぐ","し","じ", "つ","づ", "て","で", "と","ど", "へ","べ","ぺ"],
         "け":["げ","い", "さ","ざ", "た","だ", "に", "は","ば","ぱ", "ほ","ぼ","ぽ", "り"],
         "こ":["ご","い","つ","づ","て","で","に","り"],
         "が":["か","な", "ふ","ぶ","ぷ", "や", "ゆ", "ら", "り", "わ"],
         "ぎ":["き","さ","ざ", "ま", "も"],
         "ぐ":["く","し","じ", "つ","づ", "て","で", "と","ど", "へ","べ","ぺ"],
         "げ":["け","い", "さ","ざ", "た","だ", "に", "は","ば","ぱ", "ほ","ぼ","ぽ", "り"],
         "ご":["こ","い","つ","づ","て","で","に","り"],
         
         "さ":["ざ","き","ぎ","け","げ","ち","ぢ"],
         "し":["じ","い","く","ぐ","つ","づ","と","ど","ひ","び","ぴ","も","ん"],
         "す":["ず","お","ま"],
         "せ":["ぜ","む"],
         "そ":["ぞ","て","で","る","ろ","を"],
         "ざ":["さ","き","ぎ","け","げ","ち","ぢ"],
         "じ":["し","い","く","ぐ","つ","づ","と","ど","ひ","び","ぴ","も","ん"],
         "ず":["す","お","ま"],
         "ぜ":["せ","む"],
         "ぞ":["そ","て","で","る","ろ","を"],
         
         "た":["だ","け","げ","な","に"],
         "ち":["ぢ","う","ゔ","お","さ","ざ","つ","づ","ろ","を"],
         "つ":["づ","う","ゔ","く","ぐ","こ","ご","し","じ","ち","ぢ","の","ら","ろ","わ"],
         "て":["で","く","ぐ","こ","ご","そ","ぞ","ひ","び","ぴ","へ","べ","ぺ"],
         "と":["ど","く","ぐ","し","じ","を"],
         "だ":["た","け","げ","な","に"],
         "ぢ":["ち","う","ゔ","お","さ","ざ","つ","づ","ろ","を"],
         "づ":["つ","う","ゔ","く","ぐ","こ","ご","し","じ","ち","ぢ","の","ら","ろ","わ"],
         "で":["て","く","ぐ","こ","ご","そ","ぞ","ひ","び","ぴ","へ","べ","ぺ"],
         "ど":["と","く","ぐ","し","じ","を"],
         
         "な":["か","が","た","だ","は","ば","ぱ","ほ","ぼ","ぽ","む"],
         "に":["い","け","げ","こ","ご","た","だ","は","ば","ぱ"],
         "ぬ":["あ","お","の","め","る"],
         "ね":["お","る","れ","わ"],
         "の":["あ","お","つ","づ","ぬ","め"],
         
         "は":["ば","ぱ","け","げ","な","に","ほ","ぼ","ぽ","ま"],
         "ひ":["び","ぴ","え","し","じ","て","で"],
         "ふ":["ぶ","ぷ","う","ゔ","か","が","て","で"],
         "へ":["べ","ぺ","く","ぐ"],
         "ほ":["ぼ","ぽ","け","げ","な","は","ば","ぱ","ま"],
         "ば":["は","ぱ","け","げ","な","に","ほ","ぼ","ぽ","ま"],
         "び":["ひ","ぴ","え","し","じ","て","で"],
         "ぶ":["ふ","ぷ","う","ゔ","か","が","て","で"],
         "べ":["へ","ぺ","く","ぐ"],
         "ぼ":["ほ","ぽ","け","げ","な","は","ば","ぱ","ま"],
         "ぱ":["ば","は","け","げ","な","に","ほ","ぼ","ぽ","ま"],
         "ぴ":["び","ひ","え","し","じ","て","で"],
         "ぷ":["ぶ","ふ","う","ゔ","か","が","て","で"],
         "ぺ":["べ","へ","く","ぐ"],
         "ぽ":["ぼ","ほ","け","げ","な","は","ば","ぱ","ま"],
         
         "ま":["お","き","ぎ","す","ず","は","ば","ぱ","ほ","ぼ","ぽ","も","よ"],
         "み":["お"],
         "む":["お","せ","ぜ","な"],
         "め":["あ","お","ぬ","の","ゆ","わ"],
         "も":["き","ぎ","し","じ","ま"],
         
         "や":["か","が","わ"],
         "ゆ":["か","が","め","わ"],
         "よ":["ま"],
         
         "ら":["う","ゔ","か","が","つ","づ","ろ","わ"],
         "り":["い","か","が","け","げ","こ","ご"],
         "る":["う","ゔ","え","そ","ぞ","ぬ","ね","ろ","わ"],
         "れ":["え","ね","わ","ん"],
         "ろ":["う","ゔ","え","そ","ぞ","ち","ぢ","つ","づ","ら","る","わ","を"],
         
         "わ":["え","お","か","が","つ","す","ね","め","や","ゆ","ら","る","れ","ろ"],
         "を":["そ","ぞ","ち","ぢ","と","ど","ろ"],
         "ん":["え","し","じ","れ"]]
    
//    使わない文字Arrayを投げると、使用できる拗音が帰ってくる
    func usableYouonCheck(_ strArray:[String]) -> [String]{
        var returnArray:[String] = []
        
        let youonArray:[String] = ["あ","い","う","え","お","や","ゆ","よ"]
        let youonDic:[String:[String]] =
            ["あ":["ふぁ","ゔぁ"],
             "い":["すぃ","ずぃ","てぃ","でぃ","つぃ","づぃ","ふぃ","うぃ","ゔぃ"],
             "う":["とぅ"],
             "え":["しぇ","じぇ","ちぇ","ぢぇ","ひぇ","びぇ","ふぇ","うぇ","ゔぇ"],
             "お":["ふぉ","うぉ","ゔぉ"],
             "や":["きゃ","ぎゃ","しゃ","じゃ","ちゃ","ぢゃ","にゃ","ひゃ","びゃ","みゃ","りゃ"],
             "ゆ":["きゅ","ぎゅ","しゅ","じゅ","ちゅ","ぢゅ","にゅ","ひゅ","びゅ","ふゅ","みゅ","りゅ"],
             "よ":["きょ","ぎょ","しょ","じょ","ちょ","ぢょ","にょ","ひょ","びょ","みょ","りょ"]]
        
//        使わない文字Arrayの中に拗音Arrayの文字があるかチェック
        for youon in youonArray{
            if strArray.filter({ $0 == youon}).isEmpty{
//                なければ、その小文字を使う拗音の最初の一文字は入っているかチェック
                for character in youonDic[youon]!{
                    let c1 = String(character[character.index(character.startIndex, offsetBy: 0) ..< character.index(character.startIndex, offsetBy: 1)])
//                    なければ入れる
                    if strArray.filter({ $0 == c1}).isEmpty{
                        returnArray.append(character)
                    }
                }
                
            }
        }
        return returnArray
    }
    

    func searchSimilarCharacter(_ str:String) -> [String]{
        var strArray:[String] = []
        if str.count > 1{
            let s1 = String(str[str.index(str.startIndex, offsetBy: 0) ..< str.index(str.startIndex, offsetBy: 1)])
            let s2 = String(str[str.index(str.startIndex, offsetBy: 0) ..< str.index(str.startIndex, offsetBy: 1)])
            
            strArray = similarCharacters[s1]!
            let s2Array = similarCharacters[s2]!
            for str in s2Array{
                strArray.append(str)
            }
        }else{
            strArray = similarCharacters[str]!
        }
        
        return strArray
    }
}

